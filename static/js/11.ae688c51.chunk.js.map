{"version":3,"sources":["Auxiliar.js","components/Tables/ListProjects.js","components/Charts/chartPieProjects.js","components/Index/dashboard.js"],"names":["formatMoney","amount","decimalCount","decimal","thousands","Math","abs","isNaN","negativeSign","i","parseInt","Number","toFixed","toString","j","length","substr","replace","slice","e","console","log","ListProjects","props","projects","className","scope","this","map","project","name","profit","balance","React","Component","ChartPieProjects","chartColors","red","orange","yellow","green","blue","purple","grey","greyDark","white","options","Chart","defaults","doughnut","legend","display","ctx","document","getElementById","getContext","chart","type","data","datasets","backgroundColor","labels","id","Dashboard","user","balanceFormat","animateNumber","bind","element","num","time","showNum","steps","partsNumber","innerHTML","setTimeout","connect","state"],"mappings":"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","file":"static/js/11.ae688c51.chunk.js","sourcesContent":["export function formatMoney(amount, decimalCount = 2, decimal = \".\", thousands = \",\") {\n    try {\n        amount = amount / 100;\n        decimalCount = Math.abs(decimalCount);\n        decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n\n        const negativeSign = amount < 0 ? \"-\" : \"\";\n        const currency = \"$\";\n\n        let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n        let j = (i.length > 3) ? i.length % 3 : 0;\n\n        return negativeSign + currency + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n    } catch (e) {\n        console.log(e)\n    }\n}","import React from 'react';\n\nclass ListProjects extends React.Component {\n    constructor(props) {\n        super(props);\n        this.projects = props.projects;\n    }\n\n    componentDidMount() {\n    \n    }\n\n    componentDidUpdate() {\n\n    }\n    render() {\n        return (\n            <div className=\"evaluatz_list_project\">\n            <table className=\"table table-dark mb-0 rounded\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Project</th>\n                        <th scope=\"col\">%</th>\n                        <th scope=\"col\">Balance</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.projects.map((project, i) =>\n                        <tr>\n                            <th scope=\"row\">{i}</th>\n                            <td>{project.name}</td>\n                            <td>{project.profit}</td>\n                            <td>{project.balance}</td>\n                        </tr>\n                    )\n                    }\n                </tbody>\n            </table>\n        </div>\n            );\n    }\n}\n\n\n\n\nexport default ListProjects\n// export default connect(mapStateToProps)(Dashboard);","import React from 'react';\n\nimport Chart from 'chart.js';\n// import moment from 'moment';\nimport $ from 'jquery';\n\nclass ChartPieProjects extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chartColors = {\n            red: 'rgb(255, 99, 132)',\n            orange: 'rgb(255, 159, 64)',\n            yellow: 'rgb(255, 205, 86)',\n            green: 'rgb(75, 192, 192)',\n            blue: 'rgb(54, 162, 235)',\n            purple: 'rgb(153, 102, 255)',\n            grey: 'rgb(201, 203, 207)',\n            greyDark: 'rgb(50,50,50)',\n            white: 'rgb(240,240,240)'\n        };\n\n\n\n    }\n    componentDidMount() {\n        const data = {\n            datasets: [{\n                data: [10, 20],\n                backgroundColor: [\n                    'rgb(127,255,0)',\n                    'rgb(51, 51, 51)'\n                ]\n            }],\n            labels: [\n                'Available',\n                'Invested'\n            ]\n        };\n        let options = Chart.defaults.doughnut;\n\n        options = {\n            legend: {\n                display: false\n                }\n            };\n\n        const ctx = document.getElementById('chartPieProjects').getContext('2d');\n        this.chart = new Chart(ctx, {\n            type: 'doughnut',\n            data: data,\n            options: options\n        });\n\n    }\n\n\n\n\n    render() {\n        return (\n            <canvas id=\"chartPieProjects\" className=\"chartjs-render-monitor bg-dark\" ></canvas>\n        )\n    }\n}\n\nexport default ChartPieProjects;\n","import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport ListProjects from '../Tables/ListProjects';\n\nimport ChartPieProjects from '../Charts/chartPieProjects';\n\nimport { formatMoney } from '../../Auxiliar';\n\n// import $ from 'jquery';\n\n\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.balance = props.user.balance;\n        this.balanceFormat = formatMoney(props.user.balance);\n\n        this.animateNumber = this.animateNumber.bind(this);\n    }\n\n    componentDidMount() {\n        // this.balanceFormat = formatMoney(this.balance);\n        this.animateNumber(document.getElementById(\"evaluatz-index-dashboard-balance\"), this.balance, 1000);\n    }\n\n    componentDidUpdate() {\n\n\n    }\n\n    animateNumber(element, num, time) {\n        var showNum = 0;\n        var steps = time / 50;\n        var partsNumber = num / steps;\n        element.innerHTML = formatMoney(showNum);\n\n        for (var i = 0; i < steps; i++) {\n            setTimeout(() => {\n                showNum += partsNumber;\n                element.innerHTML = formatMoney(showNum);\n            }, i * 50);\n        }\n\n        setTimeout(() => {\n            element.innerHTML = formatMoney(num);\n        }, time);\n    }\n\n    render() {\n        return (\n            <div className=\"evaluatz_dashboard h-100 m-1 rounded-lg d-flex flex-column align-items-center justify-content-around\">\n                <div className=\" text-light  p-3 rounded\">\n                    Equity\n                   <div id=\"evaluatz-index-dashboard-balance\" className=\"evaluatz-text-xxlarge\">\n                        {formatMoney(this.balance)}\n                    </div>\n                </div>\n                <div className=\"w-50 p-3\">\n                <ChartPieProjects />\n                </div>\n                <div className=\"w-50 p-3\">\n                    <ListProjects projects={this.props.user.projects} />\n                </div>\n            </div>);\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    const projects = [{\n        name: \"Pj On\",\n        profit: \"0.1\",\n        balance: \"5000\"\n    }];\n    return {\n        user: { ...state.user, projects }\n    };\n};\n\nexport default connect(mapStateToProps)(Dashboard);\n\n"],"sourceRoot":""}